// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  ACHETEUR
  VENDEUR
  GESTIONNAIRE
}

model User {
  id               Int      @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String   @unique
  password         String
  emailVerified    Boolean  @default(false)
  emailVerifyToken String?  @unique
  role             Role
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  Acheteur     Acheteur?
  Vendeur      Vendeur?
  Gestionnaire Gestionnaire?
  Admin        Admin?
}

model Acheteur {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  // Champs spécifiques à un Acheteur
  commandes Commande[]
  panier    Panier?
}

model Vendeur {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  // Champs spécifiques à un Vendeur
  boutique    String?
  isCertified Boolean   @default(false)
  produits    Produit[]
  marches     Marche[]  @relation("VendeurMarche")
}

model Admin {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
  // Champs spécifiques à un Admin
  droits String?
}

model Gestionnaire {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  user    User     @relation(fields: [userId], references: [id])
  // Champs spécifiques à un Gestionnaire
  marches Marche[]
}

model Commande {
  id           Int       @id @default(autoincrement())
  acheteurId   Int
  produitId    Int
  isValidated  Boolean   @default(false)
  isArchived   Boolean   @default(false)
  hasAbortFlag Boolean   @default(false)
  starReview   Int?
  createdAt    DateTime  @default(now())
  startedAt    DateTime
  endedAt      DateTime?

  acheteur Acheteur @relation(fields: [acheteurId], references: [id])
  produit  Produit  @relation(fields: [produitId], references: [id])
  produits CommandeProduit[]
}

model Produit {
  id          Int        @id @default(autoincrement())
  vendeurId   Int
  categorieId Int
  name        String
  description String
  price       Float
  commandes   Commande[]
  categorie   Categorie   @relation(fields: [categorieId], references: [id])

  vendeur Vendeur @relation(fields: [vendeurId], references: [id])
  panierProduits PanierProduit[]
  commandeProduits CommandeProduit[]
}

model Panier {
  id          Int      @id @default(autoincrement())
  idAcheteur  Int      @unique
  totalAmount Float    @default(0)
  acheteur    Acheteur @relation(fields: [idAcheteur], references: [id])
  produits   PanierProduit[]
}

model Marche {
  id             Int          @id @default(autoincrement())
  name           String
  address        String
  starReview     Int
  specialties    String[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  gestionnaire   Gestionnaire @relation(fields: [gestionnaireId], references: [id])
  gestionnaireId Int
  vendeurs       Vendeur[]    @relation("VendeurMarche")
}

model Categorie {
  id        Int    @id @default(autoincrement())
  nom       String
  produits  Produit[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PanierProduit {
  id        Int   @id @default(autoincrement())
  panier    Panier   @relation(fields: [panierId], references: [id])
  panierId  Int
  produit   Produit  @relation(fields: [produitId], references: [id])
  produitId Int
  quantite  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommandeProduit {
  id         Int    @id @default(autoincrement())
  commande   Commande  @relation(fields: [commandeId], references: [id])
  commandeId Int
  produit    Produit   @relation(fields: [produitId], references: [id])
  produitId  Int
  quantite   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Statistique {
  id                Int     @id @default(autoincrement())
  totalUtilisateurs Int
  totalVentes       Int
  revenusTotal      Float
  dateSnapshot      DateTime  @default(now())
}

